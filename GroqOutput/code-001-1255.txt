**Part I**

```
int b[40000]={0};  // Declare an integer array b with 40000 elements and initialize all elements to 0.
void zhishu(int n)
{
     int i,j;
     for(i=2;i<sqrt(n);i++)
     {
                     for (j=2;j<n/i+1;j++)
                     {
                         b[i*j]=1;
                     }
     }
}
```

```
int fenjie(int n,int m)
{
    int s=0,i;
    if (n<m) return 0;
    if (n==m||b[n]==0) return 1;
    for (i=m;i<n;i++)
    {
        if (n%i==0)
        {
                  s=s+fenjie(n/i,i);
        }
    }
    return s+1;
}
int main()
{
    int n,i,max=0,a[1000];
    cin>>n;
    for (i=0;i<n;i++) 
    {
        cin>>a[i];
        if (a[i]>max) max=a[i];
    }
    zhishu(max);
    for (i=0;i<n;i++) cout<<fenjie(a[i],2)<<endl;
    return 0;
}
```

**Part II**

This code is used to find the number of prime factors of each number in an array. The function `zhishu` calculates the array `b` where `b[i]` is 1 if `i` is not a prime number and 0 otherwise. The function `fenjie` calculates the number of prime factors of a given number `n` by iterating from `m` to `n` and adding the number of prime factors of `n/i` to the total count. In the `main` function, the user is asked to input the size of the array and the numbers in the array. The `zhishu` function is called to initialize the array `b`, and then the `fenjie` function is called for each number in the array with the initial value of `m` set to 2. The result is printed to the console.