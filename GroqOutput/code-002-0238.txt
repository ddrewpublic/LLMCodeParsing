**Part I**

```c
struct
{
    int no;
    char wr[26];
}book[999]; // Define a struct 'book' with two fields: 'no' of type int and 'wr' of type char array of size 26

struct
{
    char name;
    int num;
    int book[999];
}a[26]; // Define another struct 'a' with three fields: 'name' of type char, 'num' of type int, and 'book' of type int array of size 999
```

```c
int main()
{
    int n,m,t,k,d; // Declare integer variables
    int all=0; // Initialize 'all' to 0
    for (t=0;t<26;t++) 
    {
        a[t].name='A'+t; // Initialize 'name' field of struct 'a' with values from 'A' to 'Z'
        a[t].num=0; // Initialize 'num' field of struct 'a' to 0
    }
    scanf("%d",&m); // Read an integer value from input
    for (t=0;t<m;t++)
    {
        scanf("%d %s",&book[t].no,&book[t].wr); // Read an integer and a string from input and store them in 'book' struct
    }
```

```c
for (t=0;t<m;t++)
{
    k=strlen(book[t].wr); // Get the length of the string stored in 'wr' field of 'book' struct
    for(n=0;n<k;n++) // Iterate through each character in the string
    {
        for(d=0;d<26;d++) // Iterate through each possible value of 'char' type
        {
            if (a[d].name==book[t].wr[n]) // Check if the character matches the 'name' field of an 'a' struct
            {
                a[d].book[a[d].num]=book[t].no; // Store the book number in the 'book' array of 'a' struct
                a[d].num++; // Increment the 'num' field of 'a' struct
                break; // Exit the inner loop
            }
        }
    }
}
```

```c
k=0; // Initialize 'k' to 0

for (t=0;t<26;t++)
{
    if (k<a[t].num) // Compare 'k' with the 'num' field of 'a' struct
        k=a[t].num; // Update 'k' if necessary
}
for (t=0;;t++)
{
    if (k==a[t].num) 
    {
        printf("%c",a[t].name); // Print the 'name' field of 'a' struct
        printf("\n%d",a[t].num); // Print the 'num' field of 'a' struct
        for (d=0;d<a[t].num;d++)
            printf("\n%d",a[t].book[d]); // Print the 'book' array of 'a' struct
        break; // Exit the outer loop
    }
}
}
```

**Part II**

Summary:

This C program reads input of book numbers and their corresponding authors, stores them in a struct, and then prints out the authors with the most books. The program uses two structs, 'book' and 'a', to store the book numbers and authors respectively. It uses nested loops to iterate through the input and store the data in the structs. The program then iterates through the 'a' struct to find the author with the most books and prints out the author and their books. The program uses 'scanf' to read input and 'printf' to print output.