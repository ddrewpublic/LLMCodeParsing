**Part I: Code with comments**

```c
int fac(int p, int q)
{
    // Initialize variables i and t
    int i, t = 1;
    // Check if p is greater than q
    if (p > q)
    {
        // Return 0 if p is greater than q
        return 0;
    }
    // Check if p is equal to q
    if (p == q)
    {
        // Return 1 if p is equal to q
        return 1;
    }
    // Start a loop from p to sqrt(q)
    for (i = p; i <= sqrt(q); i++)
    {
        // Check if q is divisible by i
        if (q % i == 0)
        {
            // Add fac(i, q/i) to t
            t += fac(i, q / i);            
        }
    }
    // Return the calculated t
    return t;
}

int main()
{
    // Declare variables a and i
    int a, i, n;
    // Read an integer from the input
    cin >> n;
    // Loop through n times
    for (i = 0; i < n; i++)
    {
        // Read an integer from the input
        cin >> a;
        // Call the fac function with 2 and a, and print the result
        cout << fac(2, a) << endl;
    }
    // Return 0 to indicate successful execution
    return 0;
}
```

**Part II: Summary**

The provided code calculates the sum of the proper divisors of a given number. The `fac` function takes two integers `p` and `q` as input, and returns the sum of the proper divisors of `q`, starting from `p`. If `p` is greater than `q`, the function returns 0. If `p` is equal to `q`, the function returns 1. The function then iterates from `p` to the square root of `q`, and for each divisor `i` of `q`, it adds the sum of the proper divisors of `q/i` to the result.

The `main` function reads an integer `n` from the input, and then iterates `n` times, reading an integer `a` each time and calling the `fac` function with `2` and `a` as arguments. The result is then printed to the output. The code demonstrates the calculation of the sum of the proper divisors of a given number, with the starting point for the calculation being adjustable through the `p` parameter.