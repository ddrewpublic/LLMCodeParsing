**Part I**

```c
struct data {
  int no;
  char au[10];
}; // Declare a struct data with two elements, no and au
void main() { // Define a function main
  struct data lib[1000]; // Declare an array of struct data with 1000 elements
  char x; // Declare a char variable x
  int n,i,j,num[26]={0},l[1000],k,max; // Declare several int variables and an array of 26 elements with initial value 0
  scanf("%d",&n); // Read an integer from input and store it in variable n
  for(i=0;i<n;i++) {
    scanf("%d",&lib[i].no); // Read an integer from input and store it in the no field of the ith element of the array lib
    scanf("%s",lib[i].au); // Read a string from input and store it in the au field of the ith element of the array lib
    l[i]=strlen(lib[i].au); // Calculate the length of the string stored in the au field of the ith element of the array lib and store it in the ith element of the array l
  }
  for(i=0;i<n;i++) {
    for(j=0;j<l[i];j++) {
      num[lib[i].au[j]-65]=num[lib[i].au[j]-65]+1; // Increment the count of the char in the corresponding index of the array num
    }
  }
  max=num[0]; // Initialize max to the first element of the array num
  for(i=0;i<26;i++) {
    if(num[i]>max) {
      max=num[i]; // Update max to the maximum value in the array num
      k=i;
    }
  }
  printf("%c\n",k+65); // Print the character corresponding to the index k + 65 (ASCII value of 'A')
  printf("%d\n",max); // Print the maximum value of the array num
  x=k+65; // Update the value of x to the character corresponding to the index k + 65
  for(i=0;i<n;i++) {
    for(j=0;j<l[i];j++) {
      if(lib[i].au[j]==x) // Check if the character in the au field of the ith element of the array lib is equal to x
        printf("%d\n",lib[i].no); // If true, print the no field of the ith element of the array lib
    }
  }
}
```

**Part II**

This code is a simple program that prints the ID of the library member(s) with the highest occurring letter of the alphabet in their name. Here's a step-by-step explanation:

- First, it reads the number of library members (n) from the input.
- Then, it reads the ID and name of each member and stores it in an array of structs.
- Next, it calculates the frequency of each letter in the names and finds the maximum frequency.
- It then prints the corresponding ASCII character of the maximum frequency and the maximum frequency.
- Finally, it prints the ID of the member(s) with the maximum frequency letter.

The time complexity of this program is O(n*m) where n is the number of library members and m is the average length of the name of a library member.