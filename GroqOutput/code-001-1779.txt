**Part I**

```c
int num=0;  // initialize the variable num to 0
```

```c
void yinshu(int x,int y)  // define a function yinshu that takes two integer parameters x and y
{
    if (x==y) num++;  // if x is equal to y, increment the value of num
    else if ((x%y==0)&&(x>y)) {yinshu(x/y,y);yinshu(x,y+1);}  // if x is divisible by y and x is greater than y, recursively call yinshu with x divided by y and x with incrementing y
    else if (x>y) yinshu(x,y+1);  // if x is greater than y, recursively call yinshu with x and incrementing y
}
```

```c
int main()  // define the main function
{
    int n,x;  // declare two integer variables n and x
    cin>>n;  // read an integer from the standard input and store it in n
    for(int i=1;i<=n;i++)  // loop n times
    {
        cin>>x;  // read an integer from the standard input and store it in x
        yinshu(x,2);  // call the yinshu function with x and 2
        cout<<num<<endl;  // print the value of num followed by a newline
        num=0;  // reset the value of num to 0
    }
}
```

**Part II**

This program is designed to calculate and print the number of proper divisors for each number from 1 to a given input n. The yinshu function takes two integer parameters x and y, and it calculates the number of proper divisors of x that are greater than y and smaller than x. The main function reads an integer n from the standard input, loops n times, and for each iteration, it reads an integer x, calls the yinshu function with x and 2, prints the result, and resets the value of num to 0. The yinshu function uses recursion to calculate the number of proper divisors.