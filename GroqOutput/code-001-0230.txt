**Part I: Code with Comments**

```c
int divide(int n, int i);   // Function prototype for the divide function
int main() {
    int n = 0;  // Initialize variable n to 0
    int t = 0;  // Initialize variable t to 0
    int sum;  // Declare variable sum
    cin >> t;  // Read an integer from the input stream and store it in t
    
    for (int i = 0; i < t; i++) {  // Loop through t times
        sum = 0;  // Initialize sum to 0
        cin >> n;  // Read an integer from the input stream and store it in n
        for (int j = 2; j <= n / 2; j++) {  // Loop from 2 to half of n
            sum = sum + divide(n, j);  // Call the divide function and add the result to sum
        }
        cout << sum + 1 << endl;  // Write the result to the output stream and add 1
    }
    return 0;
}

int divide(int n, int i) {  // Divide function
    int num = 0;
    if (n % i == 0) {  // Check if n is divisible by i
        if (n == i) {  // Check if n is equal to i
            return 1;
        }
        for (int j = 2; j <= i; j++) {
            num = num + divide(n / i, j);  // Recursively call the divide function and add the result to num
        }
        return num;
    } else {
        return 0;
    }
}
```

**Part II: Summary**

The provided code is a recursive program written in C++ that calculates the sum of all factors of a number except for 1 and the number itself. The program uses two functions: `main()` and `divide()`. In the `main()` function, it takes an integer input `t` denoting the number of test cases and iterates through it. For each test case, it reads an integer `n`, and then uses a nested loop to find all the factors of `n`. The factors are calculated using the `divide()` function, which recursively divides the input number by the current factor and sums up all the results. The final result is the sum of all factors, plus one, which is printed out. The program handles the case where the input number is equal to its factor by returning 1 in the `divide()` function.