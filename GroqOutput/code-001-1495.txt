Part I:
```
int function(int a, int m)
{
    int sum=1,i;
    // Initialize sum to 1
    if(a>m)
        return 0;
    // If a is greater than m, return 0
    else
    {
        for(i=a;i<m;i++)
        {
            // Iterate from a to m-1
            if(m%i==0)
                sum=sum+function(i,m/i);
            // If m is divisible by i, recursively call function with i and m/i
            else 
                continue;
            // If m is not divisible by i, skip to next iteration
        }
        return sum;
        // Return the calculated sum
    }
}
```

Part II: Summary

This code defines a recursive function `function(a, m)` that calculates the sum of all proper divisors of `m` (excluding `m` itself) for a given range `a` to `m`. The function returns 0 if `a` is greater than `m`.

In the `main` function, the program takes input `n` and an array `m` of `n` integers. Then, for each integer `m[i]` in the array, it calls the `function(2, m[i])` to calculate the sum of its proper divisors and prints the result.

Note that the `function` is not a valid function for all input values. It could cause a stack overflow if `m` has a large number of divisors. A more efficient solution would be to use a loop instead of recursion.