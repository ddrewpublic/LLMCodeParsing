**Part I: Code with Comments**

```c
int check(int n, int i) // Function to check if a number is prime or not
{
    for(i=2; i<=n/2;i++) // Loop from 2 to n/2
        if(n%i==0) // Check if the number is divisible by i
            break; // If divisible, break the loop
    return (i==n/2&&n!=4)?1:0; // Return 1 if the number is prime, 0 otherwise
}

int f(int n, int k) // Function to calculate the sum of divisors
{
    if (check(n,2)==1 || k==n) // If the number is prime or k is equal to n, return 1
        return 1;
    else if(n<k) // If n is less than k, return 0
        return 0;
    else
    {
        int h=0,i; // Initialize h and i
        for( i=k;i<=sqrt(n);i++) // Loop from k to sqrt(n)
            if(n%i==0) // Check if n is divisible by i
                h+=f(n/i,i); // Recursively call f with n/i and i
        return h+1; // Add 1 to the sum of divisors and return
    }
}
```

**Part II: Summary**

The provided code is a C program that calculates the sum of divisors of a given number. It uses two functions: `check` and `f`. The `check` function checks if a number is prime or not, and the `f` function calculates the sum of divisors of a number.

The `f` function uses a recursive approach to calculate the sum of divisors. It calls itself with the quotient of the original number and the current divisor, until the quotient is less than the current divisor. The sum of divisors is the sum of the results of these recursive calls, plus 1 (for the original number itself).

In the `main` function, the program reads a number `n` and performs the following operations for each number from `0` to `n-1`:

1. Reads another number `h`.
2. Calls the `f` function with `h` and `2` as arguments, and prints the result to the console.

The output will be the sum of divisors for each number from `0` to `n-1`.