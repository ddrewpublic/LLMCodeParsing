Here is the code with developer comments and a summary:

**Part I: Code**

```c
struct book {
    // Define a structure to hold book information
    int num;
    char aut[26]; // Assuming only 26 letters are used to represent the author
} b[999]; // Create an array of 999 book structures

void main() {
    // Initialize variables
    int i, j, m, n, k, max, p;
    int a[26] = {0}, q[999] = {0}; // Initialize arrays to hold frequency counts and book indices

    // Read number of books
    scanf("%d", &m);

    // Loop through each book and read book number and author
    for (i = 0; i < m; i++)
        scanf("%d %s", &b[i].num, b[i].aut);

    // Loop through each book and count frequency of each author letter
    for (i = 0; i < m; i++) {
        n = strlen(b[i].aut);
        for (j = 0; j < n; j++) {
            // Convert author letter to integer index (0-25) and increment frequency count
            k = b[i].aut[j];
            a[k - 65]++;
        }
    }

    // Find the most frequent author letter
    for (i = 1, max = a[0], p = 0; i < 26; i++) {
        if (a[i] > max) {
            p = i;
            max = a[i];
        }
    }

    // Print most frequent author letter and its frequency
    printf("%c\n%d", p + 65, max);

    // Find and print book indices that have the most frequent author letter
    for (i = 0; i < m; i++) {
        n = strlen(b[i].aut);
        for (j = 0; j < n; j++) {
            if (b[i].aut[j] == (p + 65))
                q[i] = 1;
        }
    }

    // Print book numbers of books that have the most frequent author letter
    for (i = 0; i < m; i++)
        if (q[i] == 1)
            printf("\n%d", b[i].num);
}
```

**Part II: Summary**

This program reads information about multiple books, where each book has a unique number and a string representing the author's name. The program then calculates the frequency of each letter used in the authors' names and identifies the most frequent letter. Finally, it prints the most frequent letter and lists the book numbers of all books that have this letter in their authors' names. This program assumes that the authors' names only consist of letters (a-z) and that the most frequent letter is the one that appears most frequently in the authors' names.