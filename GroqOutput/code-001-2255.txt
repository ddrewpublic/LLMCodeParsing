**Part I**

```
int num =0; // Initialize a global variable num to 0
void fenjie(int n,int x)
{ // Define a function fenjie that takes two integer parameters n and x
	extern int num; // Declare a global variable num as an external variable
	if ( n == 1)
		num ++; // If n is equal to 1, increment the global variable num by 1
	else
	for(int i = x; i<=n;i++) // Loop through the range from x to n
		if(n % i ==  0) // If n is divisible by i
			fenjie(n/i,i); // Recursively call the function fenjie with n/i and i as parameters
}
```

**Part II**

The code provided is a C++ program that calculates the number of proper divisors of a given integer `n`. A proper divisor is a divisor that is less than the number itself.

Here is a 200-word summary of the code:

The program defines a function `fenjie` that takes two integer parameters `n` and `x`. This function recursively calculates the number of proper divisors of `n`. The function uses a loop to check if `n` is divisible by any number from `x` to `n`. If it is, the function calls itself with `n/i` and `i` as parameters, where `i` is the divisor of `n`. The function increments a global variable `num` each time it finds a divisor. The base case for the recursion is when `n` is equal to 1, at which point the function increments `num` once and returns.

The main function prompts the user to input a number `k` and then repeatedly calls the `fenjie` function with a loop `k` times. Each time, it initializes `num` to 0 and calls `fenjie` with a new input `n`. The program then prints the value of `num` for each input `n`. The result is the number of proper divisors of each input integer `n`.