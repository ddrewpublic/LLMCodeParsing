Here is the output with comments for each line:

**Part I: Code Snippet**

```
struct student
{
    int num;
    char zz[20];
    struct student *next;
};
```
Define a struct `student` to represent a student with an integer `num`, a character array `zz` of size 20, and a pointer `next` to the next student in the linked list.

```
struct student *New(int n)
{
    struct student *head=NULL;
    struct student *newp, *thisp;
    int i=0;
    do
    {
        newp=(struct student*)malloc(sizeof(struct student));
        if (newp==NULL)
        {
            printf("request failed\n");
            exit(-1);
        }
        scanf("%d %s",&newp->num,newp->zz);
        if (i==0)
        {
            head = newp;
            thisp = head;
        }
        else
            thisp->next = newp;
        if (i<n)//???????
        {
            thisp = newp;
            i=i+1;
        }
    }while(i<n);
    thisp->next=NULL;
    return (head);
}
```
The `New` function creates a linked list of `n` student nodes. It uses a loop to allocate memory for each node, read the student data from the user, and link each node to the next node. The `head` variable is initialized to the first node, and the rest of the nodes are appended to the list.

```
void main()
{
    int i,j;
    int n;
    int t1=0,t2;
    int length;
    char target[1000]={' '};
    char mz=' ';
    struct student *head, *p;
    scanf("%d",&n);
    head=New(n);
    p=head;
    i=0;
    do
    {
        if (i==0)
        {
            strcpy(target,p->zz);
        }
        else
        {
            p = p->next;
            strcat(target,p->zz);
        }
        
        i+=1;
    }while(p->next != NULL);
    length=strlen(target);
    for(i=0;i<length;i++)//??????
    {
        t2=0;
        if (target[i]=='0')
            continue;
        else
        {
            for (j=i+1;j<length;j++)
            {
                if (target[j]==target[i])
                {
                    target[j]='0';
                    t2+=1;
                }
            }
            if (t2>t1)
            {
                t1=t2;
                mz=target[i];
            }
        }
    }
    printf("%c\n%d",mz,t1+1);
    p=head;
    do
    {
        length=strlen(p->zz);
        for (i=0;i<length;i++)
        {
            if ((p->zz[i])==mz)
            {
                printf("\n%d",p->num);
            }
        }
        p = p->next;
    }while(p != NULL);
}
```
The `main` function reads the number of students `n` from the user, creates a linked list of `n` student nodes using the `New` function, and then processes the student data. It concatenates the student names, finds the most frequent character in the names, and prints the character and the number of times it appears in each name.

**Part II: Summary**

This code snippet defines a linked list of student nodes, creates the list, and processes the student data. The `New` function creates a linked list of `n` student nodes, while the `main` function reads the number of students, creates the list, and then finds the most frequent character in the student names and prints the character and its frequency in each name. The code uses pointers to manage the linked list and dynamic memory allocation to create and manipulate the student nodes. The code also uses string manipulation functions such as `strcpy`, `strcat`, and `strlen` to process the student names.