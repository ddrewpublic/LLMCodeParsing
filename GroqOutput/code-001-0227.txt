**Part I**

```c
int sum=0;                          // Initialize a variable sum to 0
void ways(int a,int last);            // Declare a function ways with two integer parameters a and last
int main()
{
    int n,num[100],i;                    
    cin>>n;                         // Read an integer from input and store it in variable n
    for(i=0;i<n;i++)
    {
        cin>>num[i];              // Read an integer from input and store it in an array num
    }
    for(i=0;i<n;i++)
    {
        ways(num[i],2);               // Call the ways function with the current number and 2 as parameters
        cout<<sum<<endl;              // Print the value of sum and a newline character
        sum=0;                       // Reset the sum to 0
    }
    return 0;                       // Return 0 to indicate successful execution
}
void ways(int a,int last)    
{
    int i,j;
    for(i=last;i<=a;i++)
    {
        if(a<i)                     // If a is less than i, do nothing
        {
        }
        else if(a==i)               // If a is equal to i, increment the sum by 1
        {
            sum++;
        }
        else if(a%i==0)            // If a is divisible by i, recursively call ways with a/i and i as parameters
        {
            ways(a/i,i);
        }
    }
}
```

**Part II**

The provided code is a C++ program that calculates the number of factors for each integer in an input array. The `ways` function is a recursive function that finds the factors of a given integer `a` up to a certain `last` value. The `main` function reads an array of integers from input, calls the `ways` function for each integer with `last` parameter set to 2, and then prints the sum of factors for each integer.

The program uses the concept of recursion to find the factors of a number. The `ways` function checks if a number is divisible by any value from `last` to itself. If it is divisible, it recursively calls itself with the quotient and the current value as parameters. This process continues until the number is less than the current value, at which point the function returns. The `sum` variable is used to keep track of the total number of factors found.

The program prints the sum of factors for each integer in the input array, which can be used to calculate various properties of the numbers, such as their primality or their relationship to other numbers.