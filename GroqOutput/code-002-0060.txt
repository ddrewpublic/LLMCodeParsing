Here is the code with developer comments for each line, and a 200-word summary:

**Part I**
```
// Define a struct to represent a book
struct book {
  int n; // 1st node in a linked list
  struct book *next; // pointer to the next node
};

// Define a struct to represent an author
struct au {
  char n; // author's name
  int s; // number of books written
  struct book *p; // pointer to a book written by this author
};

void main() {
  // Declare and initialize variables
  int i, j, k, l, m, n; // integer variables
  int *p; // a pointer to an integer
  int a[100][1100] = {0}; // 2D array to store book IDs and authors
  int max = 0; // maximum frequency of a letter
  char s[30]; // string to read input
  scanf("%d", &n); // read number of authors from input

  // Loop through each author
  for (l = 1; l <= n; l++) {
    // Read the author's name and the number of books written
    scanf("%d", &j);
    scanf("%s", s);

    // Loop through each character in the author's name
    for (i = 0; s[i] != '\0'; i++) {
      // Increment the frequency of the character
      b[s[i]]++;

      // Update the value in the 2D array
      a[s[i]][b[s[i]]] = j;

      // Update the maximum frequency
      if (b[s[i]] > b[max]) max = s[i];
    }
  }
```
**Part II**
This C program is designed to read the input of the number of authors, the names of the authors, and the number of books written by each author. It uses two 2D arrays and a single array to record the frequency of each character in the authors' names and the corresponding book IDs. The program then finds the most frequent character and prints it out, along with the corresponding book ID. Along with this, it also prints out the book IDs for each character up to the maximum frequency. The program assumes that the characters in the authors' names are single-digit uppercase English alphabets and that the authors' names are single words without any spaces.