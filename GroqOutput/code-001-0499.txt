**Part I**

```c
int t;
void tot(int,int);
int main()
{
	// declare a global variable to keep track of the total divisors
    int n,a[100],i;
    // read the number of input values
    cin>>n;
    // read the input values into the array a
    for(i=1;i<=n;i++)
        cin>>a[i];
    // loop through the input values and calculate their divisors
    for(i=1;i<=n;i++) {
        // initialize the total count of divisors to 0
        t = 0;
        // recursively calculate the divisors of the current value
        tot(a[i],2);
        // print the total count of divisors
        cout<<t<<endl;
    }
    return 0;
}

void tot(int x, int min)
{
    // declare a variable to store a divisor
    int k;
    // base case: if x is 1, increment the total count of divisors
    if(x==1) {
        ++t;
        return;
    }
    // recursively search for divisors of x starting from min
    for(k=min;k<=x;k++)
        // check if k is a divisor of x
        if(x%k==0)
        {
            // if k is a divisor, recursively calculate the divisors of x/k
            tot(x/k, k);
        }
}
```

**Part II**

This program calculates the total number of divisors for each input value and prints the results. It uses a recursive function `tot` that takes an integer `x` and an integer `min` as arguments. The function calculates the divisors of `x` starting from `min` and updates the global variable `t` to keep track of the total count of divisors. The `main` function reads the input values, loops through them, and calls the `tot` function for each value. The program outputs the total count of divisors for each input value. This program can be used to calculate the total number of divisors for a given set of integers.