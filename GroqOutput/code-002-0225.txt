Here is the code with developer comments added:

**Part I - Code**

```c
struct st {
    int a;
    char s[26];
    struct st *n;
};
```

* Define a struct `st` with three members: `a` of type `int`, `s` of type `char[26]`, and `n` of type `struct st*`.

```c
struct st *creat(int m) {
    int i;
    struct st *p1,*p2,*head;
    for(i=0;i<m;i++) {
        p1=(struct st *)malloc(len);
        if(i==0) head=p1;
        else p2->n=p1;
        scanf("%d %s",&p1->a,p1->s);
        p2=p1;
    }
    p1->n=NULL;
    return(head);
}
```

* Define a function `creat` that creates a linked list of `m` nodes. Each node has an `int` value `a` and a string `s` of length 26.
* Initialize three pointers `p1`, `p2`, and `head` to `NULL`.
* Loop `m` times to create each node:
	+ Allocate memory for a new node and store it in `p1`.
	+ If it's the first node, set `head` to `p1`. Otherwise, link `p2` to `p1`.
	+ Read `a` and `s` from standard input and store them in `p1`.
	+ Update `p2` to point to the new node.
* Set the last node's `n` to `NULL`.
* Return the head of the linked list.

```c
void main() {
    int m;
    scanf("%d",&m);
    struct st *p,*q;
    p=creat(m);
    q=p;
    int i,j,k;
    int a[26]={0};
    for(i=0;i<m;i++) {
        for(j=0;j<(k=strlen(p->s));j++) a[p->s[j]-65]++;
        p=p->n;
    }
    p=q;
    int max=a[0];
    for(i=1;i<26;i++) {
        if(a[i]>max) max=a[i];
    }
    char c;
    for(i=0;i<26;i++) {
        if(a[i]==max) {
            c=i+65;
            printf("%c\n%d\n",c,a[i]);
            break;
        }
    }
    char cc;
    for(i=0;i<m;i++) {
        for(j=0;;j++) {
            cc=q->s[j];
            if(cc=='\0') break;
            if(c==cc) printf("%d\n",q->a);
        }
        q=q->n;
    }
}
```

* Define a function `main` that reads the number of nodes `m` from standard input.
* Create a linked list using the `creat` function and store it in `p`.
* Initialize an array `a` of length 26 to zero.
* Loop `m` times to count the frequency of each character in the strings:
	+ Loop through each character `j` in the string `p->s`.
	+ Increment the corresponding count in `a` by adding `p->s[j]-65` to `a`.
	+ Update `p` to point to the next node.
* Loop through the frequencies in `a` to find the maximum frequency `max`.
* Find the character corresponding to the maximum frequency `max` and print it.
* Loop through each node in the linked list again to print the values associated with the found character.

**Part II - Summary**

This code creates a linked list of nodes, where each node contains an integer value `a` and a string `s` of length 26. The `creat` function creates the linked list and initializes each node. The `main` function reads the number of nodes `m` from standard input, creates the linked list, and counts the frequency of each character in the strings. It then finds the character with the maximum frequency and prints it, along with the values associated with that character. The code demonstrates linked list operations, string manipulation, and frequency counting.