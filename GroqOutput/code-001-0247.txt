**Part I: Code with Comments**
```c
int num = 0; // initialize a variable to count the number of divisors

void check(int m, int n)
{
    for(; m <= n; m++) // loop from m to n
    {
        if(n % m == 0) // check if n is divisible by m
        {
            if(n / m == 1) // check if n is divisible by m with no remainder
            {   
                num++; // increment the counter
                return; // exit the function
            }
            else
                check(m, n / m); // recursive call with m and n divided by m
        }
    }
}

int main()
{
    int n, m;
    cin >> n; // read the number of tests
    for(; n; n--) // loop for each test
    {
        cin >> m; // read the number
        check(2, m); // call the check function with m
        cout << num << endl; // print the result
        num = 0; // reset the counter for the next test
    }
    return 0;
}
```

**Part II: Summary**

This C++ program is designed to find the number of divisors for a given number. The program uses a recursive function `check` to find the divisors, starting from 2 and dividing the number by 2 until 1. The `check` function checks if the number is divisible by the current divisor and if so, recursively calls itself with the divisor and the number divided by the divisor. The program also uses a global variable `num` to count the number of divisors.

In the `main` function, the program reads the number of tests and for each test, it reads a number, calls the `check` function with the number, and prints the result. The global variable `num` is reset for each test. The program can be modified to find the sum of divisors or to find the number of divisors for a range of numbers.