**Part I: Code with Comments**

```c++
void fun(int m, int i);                                                  // Function prototype for recursive function fun

int num ;                                                              // Global variable num

int main()
{
    int n, i, a;                                                       // Declare variables n, i, and a
    cin>>n;                                                              // Read input value for n
    for(i = 0; i < n; i++)
    {
        cin>>a;                                                           // Read input value for a
        num = 0;                                                          // Initialize num to 0
        fun(a, 2);                                                        // Call function fun with arguments a and 2
        cout<<num + 1<<endl;                                              // Print value of num plus 1
    }
    return 0;                                                            // Return 0 to indicate successful execution
}
void fun(int m, int i)
{
    int k = sqrt(m);                                                     // Calculate square root of m
    for(i = i; i <= k; i++)
    {
        if(m % i == 0)                                                   // Check if m is divisible by i
        {
            num++;                                                        // Increment num if m is divisible by i
            fun(m / i, i);                                                 // Recursively call fun with m divided by i and i
        }
    }
}
```

**Part II: Summary**

The provided C++ code is a program that calculates the number of divisors for a given set of numbers. The program reads input values from the user for the number of numbers and each number. For each number, the program uses a recursive function `fun` to calculate the number of its divisors. The function starts by checking for divisors from 2 up to the square root of the number. If a divisor is found, the function recursively calls itself with the number divided by the divisor and the divisor as new arguments. The global variable `num` keeps track of the total number of divisors found. The program prints the value of `num` plus 1 for each number, which represents the number of divisors plus 1 (since the number itself is also considered a divisor).