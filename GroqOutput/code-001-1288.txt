**Part I**

```c
int main()
{
    int fenjie(int x, int y); // declare the function fenjie
    int a, n, i; // declare integer variables
    cin >> n; // read an integer from the input
    for(i = 1; i <= n; i++) // loop n times
    {
        cin >> a; // read an integer from the input
        cout << fenjie(a, 2) << endl; // call the function fenjie and print the result
    }
    return 0; // end of the program
}
int fenjie(int x, int y)
{
    int b, i, count = 1; // initialize variables
    if(x == 1) // if x is 1, return 0
        return 0;
    if(x == 2) // if x is 2, return 1
        return 1;
    b = sqrt((double) x); // calculate the square root of x
    for(i = y; i <= b; i++) // loop from y to the square root of x
    {
        if(x % i == 0)   // if x is divisible by i
        {
            count += fenjie(x / i, i); // recursively call the function with x divided by i and i
        }
    }
    return count; // return the total count
}
```

**Part II**

The program is designed to calculate the sum of all proper divisors of a given integer, excluding the number itself. The function `fenjie` takes two integer parameters `x` and `y`, representing the number to calculate the divisors for and the starting point for the divisor search, respectively.

The main function reads an integer `n` from the input, then loops `n` times, reading an integer `a` each time and printing the result of calling the `fenjie` function with `a` and `2` as parameters. The `fenjie` function calculates the sum of all proper divisors of `x` by recursively searching for divisors starting from `y`.

The program uses the concept of recursion to efficiently calculate the sum of divisors. The function calls itself with the quotient of `x` and `i` as the new value of `x`, and `i` as the new value of `y`, until `x` is reduced to 1, at which point the recursion ends and the function returns the total count of divisors.