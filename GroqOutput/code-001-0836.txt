**Part I: Code with Comments**

```
int main()
{
    // Function declaration for ys function
    int ys(int s,int p);
    // Declare variables
    int n, m, i, t;
    // Read the number of test cases
    scanf("%d", &n);
    // Loop through each test case
    for (i = 1; i <= n; i++)
    {
        // Read the number for the current test case
        scanf("%d", &m);
        // Call the ys function with the current number and 2 as parameters
        t = ys(m, 2);
        // Print the result
        printf("%d\n", t);
    }
    // Return 0 to indicate successful execution
    return 0;
}

int ys(int s, int p)
{
    // Declare local variables
    int j, a = 1, b;
    // Initialize the sum to 0
    a = 1;
    // Loop through all numbers from p to the square root of s
    for (j = p; j * j <= s; j++)
    {
        // Check if j is a divisor of s
        if (s % j == 0)
        {
            // Calculate the other divisor
            b = s / j;
            // Add the value of the other divisor to the sum
            a = a + ys(b, j);
        }
    }
    // Return the total sum
    return (a);
}
```

**Part II: Summary**

The code consists of a main function and a helper function called `ys`. The main function reads a number `n` and performs a loop for each test case. In each iteration, it reads another number `m`, calls the `ys` function with `m` and 2 as parameters, and prints the result. The `ys` function calculates the sum of all divisors of a given number, except for 1 and the number itself. It does this by looping through all numbers from `p` to the square root of the number, and for each divisor `j`, it finds its corresponding divisor `b` and adds the value of `b` to the sum. The function returns the total sum.