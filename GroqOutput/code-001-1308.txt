**Part I: Code with comments**
```
int calculate(int a, int num) { // a is the max number
    int sum = 0; // initialize sum to 0
    if(num == 1) return 1; // base case: 1 is not divisible by anything, so return 1
    for(int i = num; i >= 2; i--) { // iterate from num down to 2
        if(num % i == 0 && i <= a) { // check if num is divisible by i and i is less than or equal to a
            sum += calculate(i, num / i); // recursively call calculate with i and num divided by i
        }
    }
    return sum; // return the sum of all divisors
}

int main () {
    int n;
    cin >> n; // read the number of inputs
    int num = 0;
    for(int i = 0; i < n; i++) { // input part
        cin >> num; // read the current input
        cout << calculate(num, num) << endl; // print the sum of divisors for the current input
    }
    return 0;
}
```

**Part II: Summary**

This program calculates the sum of all divisors for a given integer. The `calculate` function takes two parameters: `a` which is the maximum number to consider for the divisors, and `num` which is the number for which to calculate the sum of divisors. The function uses a recursive approach to find all divisors of `num` that are less than or equal to `a`, and adds them up to return the sum.

In the `main` function, the program reads the number of inputs `n` from the user, and then reads each input `num` and prints the sum of its divisors using the `calculate` function. The program continues this process until all inputs have been processed.