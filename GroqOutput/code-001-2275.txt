Here is the code with developer comments added:

Part I

```
int check(int i, int a)
{
    // Initialize a variable to keep track of the number of divisors
    int means = 1; 
    // If a is equal to 1, return 0 because 1 has only one divisor (1)
    if ( a == 1 )
        return 0; 
    // If a is equal to 2, return 1 because 2 has one proper divisor (1)
    if ( a == 2 )
        return 1; 
    // Loop through all numbers from 2 to the square root of a
    for ( ; i <= (int)sqrt(a); i++ )
    {
        // Check if i is a divisor of a
        if ( a % i == 0 )
            // If i is a divisor, recursively call the function with a/i as the new value of a
            means += check(i, a/i); 
    }
    // Return the total number of divisors found
    return means; 
} 

int main()
{
    // Declare variables for the number of test cases and the current number
    int n, i, a; 
    // Read the number of test cases
    cin >> n; 
    // Loop through each test case
    for ( i = 1; i <= n; i++ )
    {
        // Read the current number
        cin >> a; 
        // Call the check function with 2 as the initial value of i and print the result
        cout << check(2, a) << endl; 
    }
}
```

Part II

This code calculates the number of divisors of a given integer. The `check` function is a recursive function that takes two parameters: the current number `i` and the current number `a`. It checks if `i` is a divisor of `a`, and if so, recursively calls itself with `a/i` as the new value of `a`. The function returns the total number of divisors found.

The `main` function reads the number of test cases and loops through each test case, reading the current number and calling the `check` function with the starting value of `i` set to 2. The results are then printed to the console.